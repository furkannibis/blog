{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../config/blog.ts", "../../../lib/mdx/plugins/index.ts", "../../../lib/mdx/plugins/rehype/rehype-code.ts", "../../../lib/mdx/plugins/rehype/rehype-inline-code.ts", "../../../lib/mdx/plugins/remark/remark-code.ts", "../../../lib/mdx/plugins/remark/remark-heading.ts"],
  "sourcesContent": ["import { MDXOptions } from 'contentlayer/core'\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files'\n\nimport { BlogAuthors } from './config/blog'\nimport { rehypePlugins, remarkPlugins } from './lib/mdx/plugins'\n\nconst Project = defineDocumentType(() => ({\n    name: 'Project',\n    filePathPattern: 'projects/**/*.mdx',\n    contentType: 'mdx',\n    fields: {\n        name: {\n            type: 'string',\n            description: 'The name of the project',\n            required: true,\n        },\n        author: {\n            type: 'string',\n            description: 'The author of the project',\n            required: false,\n        },\n        title: {\n            type: 'string',\n            description: 'The meta title of the project',\n            required: false,\n        },\n        tags: { type: 'list', of: { type: 'string' }, default: [], required: false },\n\n        description: {\n            type: 'string',\n            description: 'The description of the project',\n            required: true,\n        },\n        date: {\n            type: 'string',\n            description: 'The date of the project',\n            required: false,\n        },\n        category: {\n            type: 'string',\n            description: 'The category of the project',\n            required: false,\n        },\n        subcategory: {\n            type: 'string',\n            description: 'The subcategory of the project',\n            required: false,\n        },\n        url: {\n            type: 'string',\n            description: \"The link to the project's homepage\",\n            required: false,\n        },\n        github: {\n            type: 'string',\n            description: \"The url to the project's github page\",\n            required: false,\n        },\n        icon: {\n            type: 'string',\n            description: 'The name of the icon to use',\n            required: true,\n        },\n        image: {\n            type: 'string',\n            description: 'Image for the project',\n            required: false,\n        },\n        featured: {\n            type: 'boolean',\n            description: 'Whether to feature this project',\n            required: false,\n        },\n        collab: {\n            type: 'boolean',\n            description: 'Whether this project is a collaboration',\n            required: true,\n        },\n    },\n    computedFields: {\n        slug: {\n            type: 'string',\n            resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\n        },\n    },\n}))\n\nconst BlogPost = defineDocumentType(() => ({\n    name: 'BlogPost',\n    filePathPattern: 'blog/**/*.mdx',\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            description: 'The title of the blog post',\n            required: true,\n        },\n        createdAt: {\n            type: 'string',\n            description: 'The date of the blog post',\n            required: true,\n        },\n        modifiedAt: {\n            type: 'string',\n            description: 'The modified time of the blog post',\n            required: true,\n        },\n        summary: {\n            type: 'string',\n            description: 'The summary of the blog post',\n            required: true,\n        },\n        image: {\n            type: 'string',\n            description: 'Image for the blog post',\n            required: true,\n        },\n        authorId: {\n            type: 'string',\n            description: 'The author of the blog post',\n            required: true,\n        },\n        tags: { type: 'list', of: { type: 'string' }, default: [] },\n    },\n    computedFields: {\n        slug: {\n            type: 'string',\n            resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\n        },\n        author: {\n            type: 'nested',\n            resolve: (doc) => BlogAuthors.find((author) => author.id === doc.authorId),\n        },\n    },\n}))\n\nconst Pages = defineDocumentType(() => ({\n    name: 'Pages',\n    filePathPattern: 'pages/**/*.mdx',\n    contentType: 'mdx',\n    computedFields: {\n        slug: {\n            type: 'string',\n            resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\n        },\n    },\n}))\n\nexport default makeSource({\n    contentDirPath: 'contents',\n    documentTypes: [Project, BlogPost, Pages],\n    mdx: {\n        remarkPlugins: remarkPlugins,\n        rehypePlugins: rehypePlugins,\n    } as MDXOptions,\n})\n", "export const BlogAuthors = [\n    {\n        id: 'Furkan',\n        name: 'Furkan \u0130B\u0130\u015E',\n        url: 'https://furkannibis.dev',\n        image: '/gallery/6.png',\n    },\n]\n\nexport const BlogCategories = [\n    'business',\n    'startup',\n    'frontend',\n    'next.js',\n    'tailwindcss',\n    'react',\n    'javascript',\n    'typescript',\n    'node.js',\n    'serverless',\n    'aws',\n    'cloud',\n    'web design',\n    'cto',\n    'freelance',\n]\n", "import rehypeKatex from 'rehype-katex'\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\nimport { type PluggableList } from 'unified'\n\nimport { rehypeCode } from './rehype/rehype-code'\nimport { rehypeInlineCode } from './rehype/rehype-inline-code'\nimport { remarkCode } from './remark/remark-code'\nimport { remarkHeading } from './remark/remark-heading'\n\n// @ts-ignore\nexport const remarkPlugins: PluggableList = [remarkGfm, remarkHeading, remarkCode, remarkMath]\nexport const rehypePlugins: PluggableList = [rehypeCode, rehypeInlineCode, rehypeKatex]\n", "import rehypeShiki, { type RehypeShikiOptions } from '@shikijs/rehype'\nimport { transformerMetaHighlight } from '@shikijs/transformers'\nimport type { Root } from 'hast'\nimport type { Plugin } from 'unified'\n\nconst titleRegex = /title=\"([^\"]*)\"/\n\nexport const DEFAULT_SHIKI_THEMES = {\n    light: 'github-light',\n    dark: 'github-dark',\n}\n\nexport const rehypeCode: [Plugin<[RehypeShikiOptions], Root>, RehypeShikiOptions] = [\n    rehypeShiki,\n    {\n        transformers: [\n            {\n                /**\n                 * - Remove trailing newline\n                 * - Remove title from meta\n                 */\n                preprocess: (code, { meta }) => {\n                    if (meta) {\n                        meta.__raw = meta.__raw?.replace(titleRegex, '')\n                    }\n\n                    return code.replace(/\\n$/, '')\n                },\n                root(hast) {\n                    const pre = hast.children[0]\n                    if (pre?.type !== 'element') return\n\n                    hast.children = [\n                        {\n                            ...pre,\n                            properties: {\n                                ...pre.properties,\n                                'data-lang': this.options.lang,\n                            },\n                        },\n                    ]\n                },\n            },\n            transformerMetaHighlight(),\n        ],\n        parseMetaString: (meta) => {\n            const titleMatch = meta.match(titleRegex)\n            const title = titleMatch?.[1] ?? null\n\n            return { title }\n        },\n        themes: DEFAULT_SHIKI_THEMES,\n        defaultColor: false,\n    },\n]\n", "import type { RehypeShikiCoreOptions } from '@shikijs/rehype/core'\nimport type { Root } from 'hast'\nimport { bundledLanguages, getHighlighter, type Highlighter } from 'shiki'\nimport type { Plugin } from 'unified'\nimport { visit } from 'unist-util-visit'\n\nimport { DEFAULT_SHIKI_THEMES } from './rehype-code'\n\nconst inlineShikiRegex = /(.*){:(.*)}$/\n\nconst themeNames = Object.values(DEFAULT_SHIKI_THEMES)\nconst themeKeys = Object.keys(DEFAULT_SHIKI_THEMES)\n\nexport const rehypeInlineCode: Plugin<[RehypeShikiCoreOptions], Root> = () => {\n    let promise: Promise<Highlighter>\n\n    return async (tree) => {\n        if (!promise) {\n            promise = getHighlighter({\n                themes: themeNames,\n                langs: Object.keys(bundledLanguages),\n            })\n        }\n\n        const highlighter = await promise\n\n        return visit(tree, 'element', (node, index, parent) => {\n            if (node.tagName !== 'code') return\n\n            const match = (node.children[0] as any)?.value?.match(inlineShikiRegex)\n            if (!match) return\n\n            const [, code, lang] = match\n            const isLang = lang[0] !== '.'\n\n            const hast = highlighter.codeToHast(code, {\n                themes: DEFAULT_SHIKI_THEMES,\n                lang: isLang ? lang : 'plaintext',\n                defaultColor: false,\n            })\n\n            const inlineCode = (hast.children[0] as any).children[0]\n            if (!inlineCode) return\n\n            /**\n             * Set the color by scope if language is not specified\n             * @example `myFunction{:.entity.name.function}`\n             */\n            if (!isLang) {\n                const colors = themeNames.map(\n                    (name) =>\n                        highlighter.getTheme(name).settings.find(({ scope }) => scope?.includes(lang.slice(1)))\n                            ?.settings.foreground ?? 'inherit',\n                )\n\n                inlineCode.children[0].children[0].properties.style = themeKeys\n                    .map((key, i) => `--shiki-${key}:${colors[i]}`)\n                    .join(';')\n            }\n\n            inlineCode.properties.className = ['shiki']\n\n            parent?.children.splice(index ?? 0, 1, inlineCode)\n        })\n    }\n}\n", "import type { Plugin } from 'unified'\nimport { visit } from 'unist-util-visit'\n\n/**\n * Set the default language for code blocks if not specified.\n */\nexport const remarkCode: Plugin = () => {\n    return (tree) => {\n        visit(tree, 'code', (node: any) => {\n            if (node.type !== 'code') return\n            if (!node.lang) node.lang = 'plaintext'\n        })\n    }\n}\n", "import Slugger from 'github-slugger'\nimport { type Plugin } from 'unified'\nimport { visit } from 'unist-util-visit'\n\nimport { TOC } from '@/types/blog'\n\nconst slugger = new Slugger()\n\nexport const remarkHeading: Plugin = () => {\n    return (tree, file) => {\n        const toc: TOC[] = []\n        slugger.reset()\n\n        visit(tree, 'heading', (node: any) => {\n            node.data ||= {}\n            node.data.hProperties ||= {}\n\n            const text = node.children[0].value\n            const id = slugger.slug(text)\n\n            node.data.hProperties.id = id\n\n            toc.push({\n                title: text,\n                url: id,\n                depth: node.depth,\n            })\n\n            return 'skip'\n        })\n\n        file.data.toc = toc\n    }\n}\n"],
  "mappings": "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",
  "names": ["visit", "visit"]
}
